<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="style/index.css">
  <script src="test-build-only/phaser.js"></script>
  <script src="<%= appBundle %>"></script>
  <script src="test-build-only/jquery-1.7.min.js"></script>
  <script src="test-build-only/soundEffects.js"></script>
  <script src="test-build-only/levels.js"></script>
  <title>2-D Craft Playground</title>
</head>
<body>

<div id="phaser-game"></div>

<p><button id="reset-button">Reset</button></p>

<p id="speed-display">Speed: 1x</p>
<input type="range" min="0" value="1" max="5" step=".01" name="speed-slider" id="speed-slider" style="width: 200px"/>

<p>
  Currently placing:
  <select id="block-type">
    <option>rails</option>
    <option>railsUnpowered</option>
    <option>redstoneWire</option>
    <option>grass</option>
    <option>cobblestone</option>
  </select>
</p>

<p>Move with <kbd>w</kbd> <kbd>a</kbd> <kbd>s</kbd> <kbd>d</kbd>. Place blocks with <kbd>Enter</kbd>. Destroy blocks with <kbd>Backspace</kbd>.</p>

<script>
  var demoLevels = window.demoLevels;

  function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
  }

  var levelNumber = parseInt(getParameterByName('level') || 1, 10);
  var testLevelToLoad = demoLevels[levelNumber];

  // Initialize test instance of game, exposed to window for debugging.
  var gameController = new GameController({
    Phaser: window.Phaser,
    containerId: 'phaser-game',
    assetRoot: 'assets/',
    audioPlayer: new Sounds(),
    debug: true,
    earlyLoadAssetPacks: testLevelToLoad.earlyLoadAssetPacks,
    earlyLoadNiceToHaveAssetPacks: testLevelToLoad.earlyLoadNiceToHaveAssetPacks,
    afterAssetsLoaded: () => {
      gameController.codeOrgAPI.startAttempt(() => {});
    },
  });

  if (levelNumber === 1) {
    /**
     * Simulate dialog being open, controller being created in different frame
     * from level load.
     */
    window.setTimeout(function() {
      gameController.loadLevel(testLevelToLoad);
    }, 10);
  } else {
    gameController.loadLevel(testLevelToLoad);
  }

  $('input[type=range]').on('input', function () {
    $("#speed-display").html('Speed: ' + $(this).val() + 'x');
    gameController.game.time.slowMotion = 1.5 / parseFloat($(this).val(), 10);
  });

  $('#reset-button').click(function () {
    gameController.codeOrgAPI.resetAttempt();
    gameController.codeOrgAPI.startAttempt(() => {});
  });

  $(window).on('keydown', e => {
    switch (e.keyCode) {
      case 8:
      case 46:
        gameController.codeOrgAPI.destroyBlock(null, 'Player');
        break;
      case 13:
        gameController.codeOrgAPI.placeInFront(null, $('#block-type').val(), 'Player');
    }
  });

  window.gameController = gameController;
</script>

<% if (liveReloadPort) { %>
<script>
  document.write(
    '<script src="//'
    + window.location.hostname
    + ':<%= liveReloadPort %>/livereload.js"><\/script>'
  );
</script>
<% } %>

</body>
</html>
