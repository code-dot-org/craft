<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="style/index.css">
  <script src="test-build-only/phaser.js"></script>
  <script src="<%= appBundle %>"></script>
  <script src="test-build-only/jquery-1.7.min.js"></script>
  <script src="test-build-only/soundEffects.js"></script>
  <script src="test-build-only/levels.js"></script>
  <style>
    .description {
      font-size: small;
      color: gray;
      margin-left: 15px;
    }
    pre {
      margin: 0;
    }
  </style>
  <title>Phaser App Playground</title>
</head>
<body>

<div id="phaser-game" style="float:left;"></div>

<textarea id="test-code-area" style="float:left; width:300px; height:300px;"></textarea>
<div style="margin:10px; clear:both;"></div>
<button id="run-button">Run</button>
<button id="reset-button">Reset</button>
<div style="margin:10px; clear:both;"></div>
<input type="range" min=".01" max="5" step=".1" name="speed-slider" id="speed-slider"/>
<p id="speed-display">1.5</p>
<div style="margin:10px; clear:both;"></div>
<button id="previous-level">Previous level</button>
<button id="refresh-button">Refresh</button>
<button id="next-level">Next level</button>
<div style="margin:10px; clear:both;"></div>
<div>Level instructions: <span id="level-instructions" style="font-weight:bold;"></span></div>
<div>Level feedback: <span id="level-feedback" style="font-weight:bold;"></span></div>
<div>
  <h2>Using test commands:</h2>
  <ul>
    <tt><pre>placeBlock('logOak');</pre></tt> <span class="description">places logOak block at player's feet</span>
    <tt><pre>moveForward();</pre></tt> <span class="description">moves player forward </span>
    <tt><pre>turnLeft();</pre></tt> <span class="description">turns player left</span>
    <tt><pre>turnRight();</pre></tt> <span class="description">turns player right</span>
    <tt><pre>destroyBlock();</pre></tt> <span class="description">destroys targeted block</span>
    <tt><pre>whileAhead('', do{<br>  moveForward();<br>  moveForward();<br>});</pre></tt> <span class="description">moves forward while block ahead is <tt>''</tt> (air)</span>
    <tt><pre>for (var i = 0; i < 99; i++) {<br>  moveForward();<br>  moveForward();<br>}</pre></tt> <span class="description">repeat loop: change 99 to # of times to repeat</span>
  </ul>
  <h2>Implemented block types:</h2>
  <ul>
    <li><tt>logOak</tt></li>
    <li><tt>tallGrass</tt></li>
    <li><tt>grass</tt></li>
    <li><tt>coarseDirt</tt></li>
    <li><tt>planksOak</tt></li>
  </ul>
</div>

<script>
  var demoLevels = window.demoLevels;

  function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
  }

  var levelNumber = parseInt(getParameterByName('level') || 1, 10);
  var testLevelToLoad = demoLevels[levelNumber];

  // Initialize test instance of game, exposed to window for debugging.
  var gameController = new GameController({
    Phaser: window.Phaser,
    containerId: 'phaser-game',
    assetRoot: 'assets/',
    audioPlayer: new Sounds(),
    debug: true,
    earlyLoadAssetPacks: testLevelToLoad.earlyLoadAssetPacks,
    earlyLoadNiceToHaveAssetPacks: testLevelToLoad.earlyLoadNiceToHaveAssetPacks,
    afterAssetsLoaded: getParameterByName('autorun') ? () => $('#run-button').click() : null
  });

  if (levelNumber === 1) {
    /**
     * Simulate dialog being open, controller being created in different frame
     * from level load.
     */
    window.setTimeout(function() {
      gameController.loadLevel(testLevelToLoad);
    }, 10);
  } else {
    gameController.loadLevel(testLevelToLoad);
  }

  $('#test-code-area').val(testLevelToLoad.solutionCode);
  $('#level-instructions').html(testLevelToLoad.instructions);

  var replacements = {
    "do{": "function(){"
  };

  function isFunction(functionToCheck) {
     var getType = {};
     return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
  }

  function shortHandToApiCalls(shortHandCode) {
    $.each(replacements, function(key, value) {
      shortHandCode = shortHandCode.split(key).join(value);
    });
    return shortHandCode;
  }

  function runCodeWithParams(code, options) {
    // execute JS code "natively"
    var params = [];
    var args = [];
    for (var k in options) {
      params.push(k);
      args.push(options[k]);
    }
    params.push(code);
    var ctor = function() {
      return Function.apply(this, params);
    };
    ctor.prototype = Function.prototype;
    return new ctor().apply(null, args);
  }

  $('input[type=range]').on('input', function () {
    $("#speed-display").html($(this).val());
    gameController.game.time.slowMotion = parseFloat($(this).val(), 10);
  });

  $('#run-button').click(function () {
    var shortHandCode = $('#test-code-area').val();
    var code = shortHandToApiCalls(shortHandCode);
    var codeOrgAPI = gameController.codeOrgAPI;
    codeOrgAPI.startCommandCollection();
    const codeParams = {};
    Object.keys(codeOrgAPI).forEach(function (key) {
      let fn = codeOrgAPI[key];
      codeParams[key] = fn.bind(null, () => {});
    });
    runCodeWithParams(code, Object.assign({}, {codeOrgAPI: codeOrgAPI}, codeParams));
    codeOrgAPI.startAttempt(function (result) {
      $('#level-feedback').html(result ? "Success!" : "Failure").css("color", result ? "green" : "red");
    });
  });

  $('#reset-button').click(function () {
    gameController.codeOrgAPI.resetAttempt();
  });

  $("#refresh-button").click(function() {
    window.location.reload();
  });

  if (!demoLevels[levelNumber - 1]) {
    $('#previous-level').hide();
  }

  if (!demoLevels[levelNumber + 1]) {
    $('#next-level').hide();
  }

  $('#next-level').click(function() {
    window.location.href = window.location.href.split("?")[0] + "?level=" + (levelNumber + 1);
  });

  $('#previous-level').click(function() {
    window.location.href = window.location.href.split("?")[0] + "?level=" + (levelNumber - 1);
  });

  window.gameController = gameController;
</script>

<% if (liveReloadPort) { %>
<script>
  document.write(
    '<script src="//'
    + window.location.hostname
    + ':<%= liveReloadPort %>/livereload.js"><\/script>'
  );
</script>
<% } %>

</body>
</html>
